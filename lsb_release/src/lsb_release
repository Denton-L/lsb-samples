#!/bin/sh
# About:   This shell script is the lsb_release implementation,
# Version: see SCRIPTVERSION (in the Declarations section)
# Licence: GPL (latest version)
# Author:  Dominique MASSONIE <mdomi@users.sourceforge.net>
# Date:    August 7th, 2000
#
# Required information in /etc/lsb-release
# LSB_VERSION
# Optional information in /etc/lsb-release
# DISTRIB_ID, DISTRIB_RELEASE, DISTRIB_CODENAME, DISTRIB_DESCRIPTION


###############################################################################
#     DECLARATIONS
###############################################################################

# This script version
SCRIPTVERSION="1.0"

# Defines the data files
INFO_ROOT="/etc"                              # directory of config files
INFO_LSB_FILE="lsb-release"                   # where to get LSB version
INFO_DISTRIB_SUFFIX="release"                 # <distrib>-<suffix>
ALTERNATE_DISTRIB_FILE="/etc/debian_version"  # for Debian
ALTERNATE_DISTRIB_NAME="Debian"               #     "
CHECKFIRST="/etc/redhat-release"              # check it before file search

# Defines our exit codes
EXIT_STATUS="0"                           # default = Ok :)
ERROR_UNKNOWN="10"                        # unknown error
ERROR_USER="1"                            # program misuse
ERROR_PROGRAM="2"                         # internal error
ERROR_NOANSWER="3"                        # all required info not available
                                          # typically non LSB compliant distro!
ERROR_LSBBADFILE="4"                      # bad "lsb-release" content

# Defines our messages
MSG_LSBBADFILE="Bad $INFO_ROOT/$INFO_LSB_FILE file, field LSB_VERSION missing."
MSG_LSBVER="LSB Version:\t"
MSG_DISTID="Distributor ID:\t"
MSG_DISTDESC="Description:\t"
MSG_DISTREL="Release:\t"
MSG_DISTCODE="Codename:\t"
MSG_NA="n/a"
MSG_NONE="(none)"
MSG_RESULT="" # contains the result in case short output selected

# Description string delimiter
DESCSTR_DELI="release"


###############################################################################
#     FUNCTIONS
###############################################################################

function Version() { # Notice: not used, but for man page generation
    echo "GNU ${0##*/} $SCRIPTVERSION"
    echo
    echo "Copyright (C) 2000 Free Software Foundation, Inc."
    echo "This is free software; see the source for copying conditions.  There\
 is NO"
    echo "warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR\
 PURPOSE."
    echo
    echo "Written by Dominique MASSONIE."
}

# defines the Usage for lsb_release
function Usage() {
    echo "GNU \`${0##*/} $SCRIPTVERSION' print certain LSB (Linux Standard\
 Base) and"
    echo "Distribution information."
    echo
    echo "Usage: ${0##*/} [OPTION]..."
    echo "With no OPTION, same as -v."
    echo
    echo "Options:"
    echo "  -v, --version"
    echo "    Display version of LSB against which distribution is compliant."
    echo "  -i, --id"
    echo "    Display string id of distributor."
    echo "  -d, --description"
    echo "    Display single line text description of distribution."
    echo "  -r, --release"
    echo "    Display release number of distribution."
    echo "  -c, --codename"
    echo "    Display codename according to distribution release."
    echo "  -a, --all"
    echo "    Display all of the above information."
    echo "  -s, --short"
    echo "    Display all of the above information in short output format."
    echo "  -h, --help"
    echo "    Display this message."

    exit $EXIT_STATUS
}

# Handles the enhanced args (i.e. --something)
function EnhancedGetopt() {
    getopt -T >/dev/null 2>&1             # is getopt the enhanced one ?
    if [ $? = 4 ]
    then                                  # Yes, advanced args ALLOWED
        OPT=$(getopt -o acdhirsv                                              \
              --long all,codename,description,help,id,release,short,version   \
              -n 'lsb_release'                                                \
              -- "$@")
    else                                  # No, advanced args NOT allowed
        # convert (if needed) the enhanced options into basic ones
        MYARGS=$(echo "$@" | sed -e "/--/s/-\(-[[:alnum:]]\)[[:alnum:]]*/\1/g")
        OPT=$(getopt -o acdhirsv                                              \
                     -n 'lsb_release'                                         \
                     -- "$MYARGS")
    fi
    if [ $? != 0 ]
    then
        exit $ERROR_PROGRAM
    fi
    eval set -- "$OPT"
    while true ; do
        case "$1" in
        -a|--all) ARG_A="y"; shift;;
        -c|--codename) ARG_C="y"; shift;;
        -d|--description) ARG_D="y"; shift;;
        -i|--id) ARG_I="y"; shift;;
        -r|--release) ARG_R="y"; shift;;
        -s|--short) ARG_S="y"; shift;;
        -v|--version) ARG_V="y"; shift;;
        -h|--help) Usage;;
        --) shift; break;;
        *)  EXIT_STATUS=$ERROR_USER
            Usage;;
        esac
    done
}

# Get/Init LSB infos (maybe Distrib infos too)
function GetLSBInfo() {
    if [ -f "$INFO_ROOT/$INFO_LSB_FILE" ]
    then
	# should init at least LSB_VERSION
	source "$INFO_ROOT/$INFO_LSB_FILE"
	[ -z "$LSB_VERSION" ] && echo "$MSG_LSBBADFILE"                       \
	    && exit $ERROR_LSBBADFILE
    else
        LSB_VERSION=$MSG_NA	# Exit code remains Ok (not ERROR_NOANSWER)
    fi
}

# Get the whole distrib information string (from ARG $1 file)
function InitDistribInfo() {
## Notice: Debian has a debian_version file
##         (at least) Mandrake has two files, a mandrake and a redhat one
    local FILENAME=$1     # CHECKFIRST or find result in GetDistribInfo() or ""

    if [ -z "$FILENAME" ]
    then
        if [ -f "$ALTERNATE_DISTRIB_FILE" ]
        then # For Debian only
            [ -z "$DISTRIB_ID" ] && DISTRIB_ID="$ALTERNATE_DISTRIB_NAME"
            [ -z "$DISTRIB_RELEASE" ]                                         \
                && DISTRIB_RELEASE=$(cat $ALTERNATE_DISTRIB_FILE)
            [ -z "$DISTRIB_CODENAME" ] && [ "$DISTRIB_RELEASE" = "2.1" ]      \
                && DISTRIB_CODENAME="Slink"
            [ -z "$DISTRIB_CODENAME" ] && [ "$DISTRIB_RELEASE" = "2.2" ]      \
		&& DISTRIB_CODENAME="Potato"
            [ -z "$DISTRIB_CODENAME" ] && [ "$DISTRIB_RELEASE" = "2.3" ]      \
		&& DISTRIB_CODENAME="Woody"
            [ -z "$DISTRIB_CODENAME" ] && DISTRIB_CODENAME=$MSG_NA            \
		&& EXIT_STATUS=$ERROR_NOANSWER
            # build the DISTRIB_DESCRIPTION string (never need to be parsed)
	    [ -z "$DISTRIB_DESCRIPTION" ]                                     \
                && DISTRIB_DESCRIPTION="$DISTRIB_ID $DESCSTR_DELI \
$DISTRIB_RELEASE ($DISTRIB_CODENAME)"
        else # Only for nothing known compliant distrib :(
            [ -z "$DISTRIB_ID" ] && DISTRIB_ID=$MSG_NA
            [ -z "$DISTRIB_RELEASE" ] && DISTRIB_RELEASE=$MSG_NA
            [ -z "$DISTRIB_CODENAME" ] && DISTRIB_CODENAME=$MSG_NA
	    [ -z "$DISTRIB_DESCRIPTION" ] && DISTRIB_DESCRIPTION=$MSG_NONE

            EXIT_STATUS=$ERROR_NOANSWER
        fi
    else
        local NO=""                    # is Description string syntax correct ?
	if [ -z "$DISTRIB_DESCRIPTION" ]                                      \
        || [ "${DISTRIB_DESCRIPTION/$DESCSTR_DELI/}" = "$DISTRIB_DESCRIPTION" ]
	then
	    TMP_DISTRIB_DESC=$(head -1 $FILENAME 2>/dev/null)
	    [ -z "$DISTRIB_DESCRIPTION" ]                                     \
		&& DISTRIB_DESCRIPTION=$TMP_DISTRIB_DESC
	else
	    TMP_DISTRIB_DESC=$DISTRIB_DESCRIPTION
	fi

        if [ -z "$TMP_DISTRIB_DESC" ]  # head or lsb-release init
	then                           # file contains no data
	    DISTRIB_DESCRIPTION=$MSG_NONE
	    NO="y"
	else                           # Do simple check
	    [ "${TMP_DISTRIB_DESC/$DESCSTR_DELI/}" = "$TMP_DISTRIB_DESC" ]    \
		&& NO="y"
	fi

	if [ -n "$NO" ]
	then                           # does not contain "release" delimiter
	    [ -z "$DISTRIB_ID" ] && DISTRIB_ID=$MSG_NA
	    [ -z "$DISTRIB_RELEASE" ] && DISTRIB_RELEASE=$MSG_NA
	    [ -z "$DISTRIB_CODENAME" ] && DISTRIB_CODENAME=$MSG_NA
	fi
    fi
}

# Check missing and requested infos, then find the file and get infos
function GetDistribInfo() {
    local NO=""
    # check if info set in the LSB file are enough to reply what is requested?
    [ -n "$ARG_D" ] && [ -z "$DISTRIB_DESCRIPTION" ] && NO="y"
    [ -z "$NO" ] && [ -n "$ARG_I" ] && [ -z "$DISTRIB_ID" ] && NO="y"
    [ -z "$NO" ] && [ -n "$ARG_R" ] && [ -z "$DISTRIB_RELEASE" ] && NO="y"
    [ -z "$NO" ] && [ -n "$ARG_C" ] && [ -z "$DISTRIB_CODENAME" ] && NO="y"

    if [ -n "$NO" ]
    then
	if [ ! -f "$CHECKFIRST" ]
	then
	    CHECKFIRST=$(find $INFO_ROOT/ -maxdepth 1                         \
 	           -name \*$INFO_DISTRIB_SUFFIX                               \
		   -and ! -name $INFO_LSB_FILE                                \
		   -and -type f                                               \
		   2>/dev/null                                                \
                   | awk 'END { print $1 ;}') # multi file pb: keep the last
                   # -and ! -perm +0111 seems broken on Mandrake 7.0
	fi
	InitDistribInfo $CHECKFIRST
    fi
}

# Display version of LSB against which distribution is compliant
function DisplayVersion() {
    if [ -z "$ARG_S" ]
    then
	echo -e "$MSG_LSBVER$LSB_VERSION"          # at least "n/a"
    else
	MSG_RESULT="$MSG_RESULT${MSG_RESULT:+ }$LSB_VERSION"
    fi
}

# Display string id of distributor ( i.e. a single word! )
function DisplayID() {
    if [ -z "$DISTRIB_ID" ]
    then
## Linux could be part of the distro name (i.e. Turbolinux) or a separate word
## set before, after...
## also expect "release" as delimiter (else stop when NumberOfField reached)
        DISTRIB_ID=$(echo $TMP_DISTRIB_DESC                                   \
             | awk --assign delimiter="$DESCSTR_DELI" --assign na="$MSG_NA"   \
		    'BEGIN {                                                  \
                        i = 1 ; res = ""                                      \
                    }                                                         \
                    {                                                         \
                        while ( i < NF && $i != delimiter ) {                 \
                            if (tolower($i) != "linux")                       \
                                res=res$i ;                                   \
                            i++                                               \
                        }                                                     \
                    }                                                         \
                    END {                                                     \
			if (i == NF || res == "" )                            \
			    print na ;                                        \
			else                                                  \
			    print res ;                                       \
                    }')
    fi
    if [ -z "$ARG_S" ]
    then
	echo -e "$MSG_DISTID$DISTRIB_ID"
    else
	MSG_RESULT="$MSG_RESULT${MSG_RESULT:+ }$DISTRIB_ID"
    fi
}

# Diplay single line text description of distribution
function DisplayDescription() {
    if [ -z "$DISTRIB_DESCRIPTION" ]
    then
        # should not be empty since GetDistribInfo called on Initialization !
        EXIT_STATUS=$ERROR_PROGRAM
    fi
    if [ -z "$ARG_S" ]
    then
	echo -e "$MSG_DISTDESC$DISTRIB_DESCRIPTION"
    else
	MSG_RESULT="$MSG_RESULT${MSG_RESULT:+ }\"$DISTRIB_DESCRIPTION\""
    fi
}

# Display release number of distribution.
function DisplayRelease() {
    if [ -z "$DISTRIB_RELEASE" ]
    then                       # parse the "$DISTRIB_DESCRIPTION" string
        DISTRIB_RELEASE=$(echo "$TMP_DISTRIB_DESC" |                          \
      sed -e "s/.*$DESCSTR_DELI[[:blank:]]*\([[:digit:]][[:graph:]]*\).*/\1/" )
	[ "$DISTRIB_RELEASE" = "$TMP_DISTRIB_DESC" ]                          \
	    || [ -z "$DISTRIB_RELEASE" ]                                      \
	    && DISTRIB_RELEASE=$MSG_NA
    fi
    if [ -z "$ARG_S" ]
    then
	echo -e "$MSG_DISTREL$DISTRIB_RELEASE"
    else
	MSG_RESULT="$MSG_RESULT${MSG_RESULT:+ }$DISTRIB_RELEASE"
    fi
}

# Display codename according to distribution version.
function DisplayCodename() {
    if [ -z "$DISTRIB_CODENAME" ]
    then                       # parse the "$DISTRIB_DESCRIPTION" string
        DISTRIB_CODENAME=$(echo "$TMP_DISTRIB_DESC" |                         \
			   sed -e "s/.*$DESCSTR_DELI.*(\(.*\)).*/\1/")
	[ "$DISTRIB_CODENAME" = "$TMP_DISTRIB_DESC" ]                         \
	    || [ -z "$DISTRIB_CODENAME" ]                                     \
	    && DISTRIB_CODENAME=$MSG_NA
    fi
    if [ -z "$ARG_S" ]
    then
	echo -e "$MSG_DISTCODE${DISTRIB_CODENAME// /}" # Remove blanks
    else
	MSG_RESULT="$MSG_RESULT${MSG_RESULT:+ }${DISTRIB_CODENAME// /}"
    fi
}


###############################################################################
#     MAIN
###############################################################################

# Check if any prog argument
if [ -z "$1" ]
then
    ARG_V="y"             # default set to Display LSB Version (not Usage)
else
    EnhancedGetopt "$@"   # Parse program args
fi

# Update args to All if requested 
if [ -n "$ARG_A" ]
then
    [ -z "$ARG_C" ] && ARG_C="y"
    [ -z "$ARG_D" ] && ARG_D="y"
    [ -z "$ARG_I" ] && ARG_I="y"
    [ -z "$ARG_R" ] && ARG_R="y"
    [ -z "$ARG_V" ] && ARG_V="y"
fi

# Initialization
GetLSBInfo
GetDistribInfo

# Display requested infos (order as follow)
[ -n "$ARG_V" ] && DisplayVersion
[ -n "$ARG_I" ] && DisplayID
[ -n "$ARG_D" ] && DisplayDescription
[ -n "$ARG_R" ] && DisplayRelease
[ -n "$ARG_C" ] && DisplayCodename

[ -n "$ARG_S" ] && echo "$MSG_RESULT"

exit $EXIT_STATUS
